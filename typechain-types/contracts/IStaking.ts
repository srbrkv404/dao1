/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface IStakingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "claim"
      | "grantAdminRole"
      | "setRewardPercent"
      | "setRewardTime"
      | "setUnstakeTime"
      | "stake"
      | "unstake"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Claimed" | "Staked" | "Unstaked"
  ): EventFragment;

  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "grantAdminRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardPercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUnstakeTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "unstake", values?: undefined): string;

  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "grantAdminRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUnstakeTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
}

export namespace ClaimedEvent {
  export type InputTuple = [
    user: AddressLike,
    amount: BigNumberish,
    time: BigNumberish
  ];
  export type OutputTuple = [user: string, amount: bigint, time: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
    time: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakedEvent {
  export type InputTuple = [
    user: AddressLike,
    amount: BigNumberish,
    time: BigNumberish
  ];
  export type OutputTuple = [user: string, amount: bigint, time: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
    time: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnstakedEvent {
  export type InputTuple = [
    user: AddressLike,
    amount: BigNumberish,
    time: BigNumberish
  ];
  export type OutputTuple = [user: string, amount: bigint, time: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
    time: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IStaking extends BaseContract {
  connect(runner?: ContractRunner | null): IStaking;
  waitForDeployment(): Promise<this>;

  interface: IStakingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  claim: TypedContractMethod<[], [void], "view">;

  grantAdminRole: TypedContractMethod<[admin: AddressLike], [void], "view">;

  setRewardPercent: TypedContractMethod<
    [percent: BigNumberish],
    [void],
    "view"
  >;

  setRewardTime: TypedContractMethod<[time: BigNumberish], [void], "view">;

  setUnstakeTime: TypedContractMethod<[time: BigNumberish], [void], "view">;

  stake: TypedContractMethod<[lpAmount: BigNumberish], [void], "view">;

  unstake: TypedContractMethod<[], [void], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<[], [void], "view">;
  getFunction(
    nameOrSignature: "grantAdminRole"
  ): TypedContractMethod<[admin: AddressLike], [void], "view">;
  getFunction(
    nameOrSignature: "setRewardPercent"
  ): TypedContractMethod<[percent: BigNumberish], [void], "view">;
  getFunction(
    nameOrSignature: "setRewardTime"
  ): TypedContractMethod<[time: BigNumberish], [void], "view">;
  getFunction(
    nameOrSignature: "setUnstakeTime"
  ): TypedContractMethod<[time: BigNumberish], [void], "view">;
  getFunction(
    nameOrSignature: "stake"
  ): TypedContractMethod<[lpAmount: BigNumberish], [void], "view">;
  getFunction(
    nameOrSignature: "unstake"
  ): TypedContractMethod<[], [void], "view">;

  getEvent(
    key: "Claimed"
  ): TypedContractEvent<
    ClaimedEvent.InputTuple,
    ClaimedEvent.OutputTuple,
    ClaimedEvent.OutputObject
  >;
  getEvent(
    key: "Staked"
  ): TypedContractEvent<
    StakedEvent.InputTuple,
    StakedEvent.OutputTuple,
    StakedEvent.OutputObject
  >;
  getEvent(
    key: "Unstaked"
  ): TypedContractEvent<
    UnstakedEvent.InputTuple,
    UnstakedEvent.OutputTuple,
    UnstakedEvent.OutputObject
  >;

  filters: {
    "Claimed(address,uint256,uint256)": TypedContractEvent<
      ClaimedEvent.InputTuple,
      ClaimedEvent.OutputTuple,
      ClaimedEvent.OutputObject
    >;
    Claimed: TypedContractEvent<
      ClaimedEvent.InputTuple,
      ClaimedEvent.OutputTuple,
      ClaimedEvent.OutputObject
    >;

    "Staked(address,uint256,uint256)": TypedContractEvent<
      StakedEvent.InputTuple,
      StakedEvent.OutputTuple,
      StakedEvent.OutputObject
    >;
    Staked: TypedContractEvent<
      StakedEvent.InputTuple,
      StakedEvent.OutputTuple,
      StakedEvent.OutputObject
    >;

    "Unstaked(address,uint256,uint256)": TypedContractEvent<
      UnstakedEvent.InputTuple,
      UnstakedEvent.OutputTuple,
      UnstakedEvent.OutputObject
    >;
    Unstaked: TypedContractEvent<
      UnstakedEvent.InputTuple,
      UnstakedEvent.OutputTuple,
      UnstakedEvent.OutputObject
    >;
  };
}
